# - find Mhash hash library
# MHASH_INCLUDE_DIR - Where to find Mhash hash library header files (directory)
# MHASH_LIBRARY - Mhash hash library libraries
# MHASH_LIBRARY_RELEASE - Where the release library is
# MHASH_LIBRARY_DEBUG - Where the debug library is
# MHASH_FOUND - Set to TRUE if we found everything (library, includes and executable)

# Copyright (c) 2012 Adam Ross, <example@example.com>
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#
# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler

IF( MHASH_INCLUDE_DIR AND MHASH_LIBRARY_RELEASE AND MHASH_LIBRARY_DEBUG )
    SET(MHASH_FIND_QUIETLY TRUE)
ENDIF( MHASH_INCLUDE_DIR AND MHASH_LIBRARY_RELEASE AND MHASH_LIBRARY_DEBUG )

FIND_PATH( MHASH_INCLUDE_DIR mhash.h  )

FIND_LIBRARY(MHASH_LIBRARY_RELEASE NAMES mhash )

FIND_LIBRARY(MHASH_LIBRARY_DEBUG NAMES   HINTS /usr/lib/debug/usr/lib/ )

IF( MHASH_LIBRARY_RELEASE OR MHASH_LIBRARY_DEBUG AND MHASH_INCLUDE_DIR )
	SET( MHASH_FOUND TRUE )
ENDIF( MHASH_LIBRARY_RELEASE OR MHASH_LIBRARY_DEBUG AND MHASH_INCLUDE_DIR )

IF( MHASH_LIBRARY_DEBUG AND MHASH_LIBRARY_RELEASE )
	# if the generator supports configuration types then set
	# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
	IF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
		SET( MHASH_LIBRARY optimized ${MHASH_LIBRARY_RELEASE} debug ${MHASH_LIBRARY_DEBUG} )
	ELSE( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
    # if there are no configuration types and CMAKE_BUILD_TYPE has no value
    # then just use the release libraries
		SET( MHASH_LIBRARY ${MHASH_LIBRARY_RELEASE} )
	ENDIF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
ELSEIF( MHASH_LIBRARY_RELEASE )
	SET( MHASH_LIBRARY ${MHASH_LIBRARY_RELEASE} )
ELSE( MHASH_LIBRARY_DEBUG AND MHASH_LIBRARY_RELEASE )
	SET( MHASH_LIBRARY ${MHASH_LIBRARY_DEBUG} )
ENDIF( MHASH_LIBRARY_DEBUG AND MHASH_LIBRARY_RELEASE )

IF( MHASH_FOUND )
	IF( NOT MHASH_FIND_QUIETLY )
		MESSAGE( STATUS "Found Mhash header file in ${MHASH_INCLUDE_DIR}")
		MESSAGE( STATUS "Found Mhash libraries: ${MHASH_LIBRARY}")
	ENDIF( NOT MHASH_FIND_QUIETLY )
ELSE(MHASH_FOUND)
	IF( MHASH_FIND_REQUIRED)
		MESSAGE( FATAL_ERROR "Could not find Mhash" )
	ELSE( MHASH_FIND_REQUIRED)
		MESSAGE( STATUS "Optional package Mhash was not found" )
	ENDIF( MHASH_FIND_REQUIRED)
ENDIF(MHASH_FOUND)
